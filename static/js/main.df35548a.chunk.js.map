{"version":3,"sources":["assets/leaf-logo.png","utils/itemCodes.ts","utils/numeric.ts","utils/items.ts","utils/formatCheat.ts","ItemShow.tsx","ItemsSearch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseVariation","variation","includes","padStart","split","v1","v2","parsedV2","parseInt","realId","item","internalId","decimalToHex","d","padding","hex","Number","toString","length","toUpperCase","isRecipe","input","has","recipeCheat","itemCheat","variantId","ItemShow","props","variant","small","onClick","onDoubleClick","iconHeight","image","albumImage","storageImage","alt","className","src","height","name","category","map","materials","v","k","key","uniqueEntryId","undefined","genuine","colors","join","themes","items","untypedItems","recipes","untypedRecipes","recipe","allItems","find","i","craftedItemInternalId","processedItems","flatMap","variants","options","includeScore","keys","weight","myIndex","Fuse","createIndex","fuse","searcher","memoize","value","search","limit","ItemsSearch","onSelect","onSecondarySelect","useState","matchedOptions","setMatchedOptions","doSearch","useEffect","result","r","placeholder","onChange","e","target","defaultValue","addonAfter","SearchOutlined","o","EmptyItem","slot","leafLogo","filename","source","buy","sell","cellIndex","row","column","InventoryGrid","selectedItems","fillCell","rowIndex","columnIndex","Main","selectedItem","selectItem","selectItemInCell","nextEmptyIndex","range","fillIndex","index","fillEmpty","message","success","href","rel","nextIndex","indexOf","selectNext","disabled","Object","values","indexAsString","thirdField","fourthField","formatCheat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.df35548a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/leaf-logo.a8cf6480.png\";","import { Variant } from '../items/items'\r\nimport { Recipes } from '../items/recipes'\r\nexport function parseVariation(variation: string = 'NA') {\r\n  if (variation === 'NA' || !variation.includes('_')) {\r\n    return ''.padStart(8, '0')\r\n  }\r\n  if (variation.includes('_')) {\r\n    const [v1, v2] = variation.split('_')\r\n    const parsedV2 = parseInt(v2, 10)\r\n    return `${parsedV2 * 2}${v1}`.padStart(8, '0')\r\n  }\r\n  return \"XXXXXXXX\"\r\n}\r\n\r\n\r\nexport const realId = (item: Variant | Recipes) => item.internalId\r\n","export function decimalToHex(d: number, padding: number = 8) {\r\n  var hex = Number(d).toString(16);\r\n\r\n  while (hex.length < padding) {\r\n    hex = \"0\" + hex;\r\n  }\r\n\r\n  return hex.toUpperCase();\r\n}","import { has } from \"lodash\";\r\nimport { InvertedVariant, ExtendedRecipe } from \"./definitions\";\r\nimport { Recipes } from \"../items/recipes\";\r\nimport {Item} from '../items/all'\r\nimport allItems from '../items/all.json'\r\n\r\nexport function isRecipe(input: any): input is Recipes {\r\n  return has(input, 'craftedItemInternalId')\r\n}\r\n\r\nexport function isVariant(input: any): input is InvertedVariant {\r\n  return has(input, 'uniqueEntryId') && !has(input, 'craftedItemInternalId')\r\n}\r\n\r\nexport function inflateRecipes(recipe: Recipes): ExtendedRecipe {\r\n  return {\r\n    ...recipe,\r\n    // @ts-expect-error\r\n    item: (allItems as Item[]).find(i => i.internalId === recipe.craftedItemInternalId)\r\n  }\r\n}","import { parseVariation, realId } from './itemCodes';\r\nimport { decimalToHex } from './numeric';\r\nimport ot from '../data/output_template.json'\r\nimport { isRecipe } from './items';\r\nimport { Variant } from '../items/items';\r\nimport { Recipes } from '../items/recipes';\r\n\r\nconst PLAYER_1_1_ADDRESS = 0xACDAD530\r\nconst PLAYER_1_2_ADDRESS = 0xACDAD5E8\r\nconst PLAYER_OFFSET = 0x133B78\r\nconst SLOT_OFFSET = 0x8\r\n\r\nexport function getInventoryAddres(player: number, slot: number) {\r\n  const basePlayerAddress = slot >= 20 ? PLAYER_1_2_ADDRESS : PLAYER_1_1_ADDRESS\r\n  const actualSlotCount = slot >= 20 ? slot - 20 : slot\r\n  const playerAddress = basePlayerAddress + (player * PLAYER_OFFSET)\r\n  return decimalToHex((playerAddress + (actualSlotCount * SLOT_OFFSET)))\r\n}\r\n\r\ntype Player = keyof typeof ot\r\n\r\n//const inventoryOffsets: Record<Player, number> = {\r\n//  \"Player 1\": 0,\r\n//  \"Player 2\": 1,\r\n//  \"Player 3\": 2,\r\n//  \"Player 4\": 3,\r\n//  \"Player 5\": 4,\r\n//  \"Player 6\": 5,\r\n//  \"Player 7\": 6,\r\n//  \"Player 8\": 7\r\n//}\r\n\r\n//function generateTemplate(index: number, player: Player = \"Player 1\"): [string, string, string, string] {\r\n//  const inventoryPosition = getInventoryAddres(inventoryOffsets[player], index)\r\n//  return [\"08100000\", inventoryPosition, \"00000000\", \"0000FFFE\"]\r\n//}\r\n\r\n\r\nfunction recipeCheat(item: Recipes): string[] {\r\n  return [decimalToHex(realId(item)), '000016A2']\r\n}\r\n\r\nfunction itemCheat(item: Variant): string[] {\r\n  return [item.variantId != null ? parseVariation(item.variantId) : '00000000', decimalToHex(realId(item))]\r\n}\r\n\r\nexport function formatCheat(item: Variant | Recipes, indexAsString: string, player: Player = \"Player 1\") {\r\n  //const index = parseInt(indexAsString, 10);\r\n  //const template = generateTemplate(index, player)\r\n  const [thirdField, fourthField] = isRecipe(item) ? recipeCheat(item) : itemCheat(item)\r\n  return `${thirdField}${fourthField} `;\r\n}\r\n","import { map } from 'lodash'\r\nimport React, { Fragment } from 'react'\r\nimport { AnyItem } from './utils/definitions'\r\nimport { isRecipe, isVariant } from './utils/items'\r\n\r\ninterface ItemShowProps {\r\n  variant: AnyItem\r\n  small?: boolean\r\n  onClick?: () => any\r\n  onDoubleClick?: () => any\r\n}\r\n\r\nexport function ItemShow(props: ItemShowProps) {\r\n  const { variant, small = false, onClick = () => { }, onDoubleClick = () => {} } = props\r\n  const iconHeight = small ? 90 : 240\r\n  const image = isRecipe(variant) ? variant.image : variant.image ?? variant.albumImage ?? variant.storageImage ?? ''\r\n  const alt = isRecipe(variant) ? 'recipe' : variant.variation ?? ''\r\n  return (\r\n    <div className=\"box\">\r\n      <article className=\"media\" onClick={onClick} onDoubleClick={onDoubleClick}>\r\n        <figure className=\"media-left\">\r\n          <p className=\"image is-64x64\">\r\n            <img src={image} height={iconHeight} alt={`${variant.name} ${alt}`} />\r\n          </p>\r\n        </figure>\r\n        <div className=\"media-content\">\r\n          <div className=\"content\">\r\n            <p className=\"is-small\">\r\n              <strong>{isRecipe(variant) ? `${variant.name} recipe` : variant.name}</strong><br />\r\n              {isRecipe(variant) && <>\r\n                {variant.category}<br />\r\n\r\n                {map(variant.materials, (v, k) => <Fragment key={`mat-${variant.uniqueEntryId}-${k}`}>{k}: {v}<br /></Fragment>)}\r\n\r\n              </>}\r\n              {isVariant(variant) && <>\r\n                {variant.genuine !== undefined && <>{variant.genuine ? 'Genuine' : 'Fake'}<br /></>}\r\n                {variant.colors.join(', ')}<br />\r\n                {variant.themes.join(', ')}<br />\r\n              </>}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </article >\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Items } from './items/items'\r\nimport untypedItems from './items/items.json'\r\nimport untypedRecipes from './items/recipes.json'\r\nimport Fuse from 'fuse.js'\r\nimport { memoize, flatMap } from 'lodash'\r\nimport { InvertedVariant, AnyItem } from './utils/definitions'\r\nimport { Input } from 'antd'\r\nimport { ItemShow } from './ItemShow'\r\nimport {SearchOutlined} from '@ant-design/icons'\r\nimport { inflateRecipes } from './utils/items'\r\nimport { Recipes } from './items/recipes'\r\n\r\nconst items: Items[] = untypedItems as Items[]\r\nconst recipes = (untypedRecipes as unknown as Recipes[]).map(inflateRecipes)\r\nconst processedItems: InvertedVariant[] = flatMap(items, ({ variants, ...item }) => variants.map(v => ({ ...v, item, name: item.name })))\r\nexport const allItems: AnyItem[] = [...processedItems, ...recipes]\r\n\r\nconst options = {\r\n  includeScore: true,\r\n  keys: [\r\n    {\r\n      name: 'name',\r\n      weight: 5\r\n    },\r\n    {\r\n      name: 'variants.variation',\r\n      weight: 2\r\n    },\r\n    {\r\n      name: 'variants.colors',\r\n      weight: 2\r\n    },\r\n    {\r\n      name: 'variants.pattern',\r\n      weight: 2\r\n    },\r\n    {\r\n      name: 'tag',\r\n      weight: 2\r\n    },\r\n    'curtainType',\r\n    'curtainColor',\r\n    'style1',\r\n    'style2',\r\n    'primaryShape',\r\n    'secondaryShape',\r\n    'type',\r\n    'category',\r\n    'hhaCategory'\r\n  ]\r\n}\r\n\r\nconst myIndex = Fuse.createIndex(options.keys, allItems)\r\nconst fuse = new Fuse(allItems, options, myIndex)\r\nconst searcher = memoize((value: string) => fuse.search(value, { limit: 30 }))\r\n\r\nexport interface ItemsSearchProps {\r\n  onSelect(item: AnyItem): void\r\n  onSecondarySelect(item: AnyItem): void\r\n}\r\nexport function ItemsSearch(props: ItemsSearchProps) {\r\n  const { onSelect, onSecondarySelect = () => {} } = props\r\n  const [matchedOptions, setMatchedOptions] = useState<AnyItem[]>([])\r\n  const [search, doSearch] = useState<string>('')\r\n  useEffect(() => {\r\n    const result = searcher(search)\r\n    setMatchedOptions(result.map(r => r.item))\r\n  }, [search])\r\n\r\n  const options: AnyItem[] = [...matchedOptions]\r\n\r\n  return (\r\n    <div className=\"tile is-ancestor\">\r\n      <div className=\"tile is-12 is-vertical\">\r\n        <div className=\"tile\">\r\n          <Input placeholder=\"input search text\" onChange={(e) => doSearch(e.target.value)} defaultValue={search} addonAfter={<SearchOutlined />}/>\r\n        </div>\r\n        {options.map(o => <div key={`result-${o.uniqueEntryId}`} className='tile'><ItemShow variant={o} onDoubleClick={() => onSecondarySelect(o)} onClick={() => onSelect(o)} /></div>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport 'bulma/css/bulma.css'\r\nimport './App.css'\r\nimport { map } from 'lodash'\r\nimport leafLogo from './assets/leaf-logo.png'\r\nimport { formatCheat } from './utils/formatCheat'\r\nimport { ItemShow } from './ItemShow'\r\nimport { range } from 'lodash'\r\nimport { allItems, ItemsSearch } from './ItemsSearch'\r\nimport { AnyItem } from './utils/definitions'\r\nimport { Button, message } from 'antd'\r\n\r\ninterface EmptyItemProps {\r\n  slot: number\r\n  onClick?: () => any\r\n}\r\n\r\nfunction EmptyItem(props: EmptyItemProps) {\r\n  const { onClick = () => { } } = props\r\n\r\n  const variant: AnyItem = {\r\n    name: `Empty Slot #${props.slot + 1}`,\r\n    item: {\r\n      name: `Empty Slot #${props.slot + 1}`\r\n    },\r\n    image: leafLogo,\r\n    filename: '',\r\n    uniqueEntryId: '',\r\n    colors: [],\r\n    themes: [],\r\n    source: [],\r\n    internalId: 0,\r\n    buy: 0,\r\n    sell: 0\r\n  }\r\n  return <ItemShow small={true} onClick={onClick} variant={variant} />\r\n}\r\n\r\nconst cellIndex = (row: number, column: number) => row * 4 + column\r\n\r\ninterface InventoryGridProps {\r\n  selectedItems: Record<number, AnyItem>\r\n  fillCell: (row: number, col: number) => void\r\n}\r\n\r\nfunction InventoryGrid(props: InventoryGridProps) {\r\n  const { selectedItems, fillCell } = props\r\n  return (\r\n    <>\r\n      {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((rowIndex) => (\r\n        <div className=\"tile is-ancestor\" key={`row-${rowIndex}`}>\r\n          {[0, 1, 2, 3].map((columnIndex) => (\r\n            <div className=\"tile is-parent\" key={`row-${rowIndex}-column-${columnIndex}`}>\r\n              <div className=\"tile is-child\">\r\n                {selectedItems[cellIndex(rowIndex, columnIndex)] === undefined ? (\r\n                  <EmptyItem onClick={() => fillCell(rowIndex, columnIndex)} slot={cellIndex(rowIndex, columnIndex)} />\r\n                ) : (\r\n                    <ItemShow onClick={() => fillCell(rowIndex, columnIndex)} small={true} variant={selectedItems[cellIndex(rowIndex, columnIndex)]} />\r\n                  )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction Main() {\r\n  const [selectedItem, selectItem] = useState<AnyItem>(allItems[0])\r\n  const [selectedItems, selectItemInCell] = useState<Record<number, AnyItem>>({})\r\n\r\n  const nextEmptyIndex = range(40).find((i) => selectedItems[i] === undefined) ?? 0\r\n  const fillIndex = (index: number, item = selectedItem) => selectItemInCell({ ...selectedItems, [index]: item })\r\n  const fillCell = (row: number, column: number, item = selectedItem) => fillIndex(cellIndex(row, column), item)\r\n  const fillEmpty = (item = selectedItem) => {\r\n    message.success(`Added ${item.name} to the list.`)\r\n    fillIndex(nextEmptyIndex, item)\r\n  }\r\n  const selectNext = () => {\r\n    const currentIndex = allItems.indexOf(selectedItem)\r\n    const nextIndex = currentIndex + 1\r\n    if (nextIndex < allItems.length) {\r\n      selectItem(allItems[nextIndex])\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"hero is-small is-dark\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            \r\n            <h1 className=\"title\">\r\n              <img src={leafLogo} className=\"logo\" alt=\"Animal Crossing New Horizons Leaf\" /> AC:NH OrderBot Helper\r\n      </h1>\r\n            <h2 className=\"subtitle\">\r\n              <a href=\"https://github.com/yknx4/yknx4.github.io\" target=\"_blank\" rel=\"noreferrer\">Credits to yknx4</a> | Modified V1.0 by JayJay\r\n      </h2>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"section\">\r\n        <div className=\"columns\">\r\n          <aside className=\"menu column is-one-quarter\">\r\n            <div className='container is-fluid'>\r\n              <div className=\"columns\">\r\n                <div className=\"column\">\r\n                  <Button onClick={() => selectNext()}>\r\n                    Select Next\r\n            </Button>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <Button disabled={Object.values(selectedItems).length >= 40} onClick={() => fillEmpty()}>\r\n                    Fill Next Empty\r\n            </Button>\r\n                </div>\r\n              </div>\r\n              <ItemShow variant={selectedItem} />\r\n              <ItemsSearch onSecondarySelect={fillEmpty} onSelect={(item) => { selectItem(item) }} />\r\n            </div>\r\n          </aside>\r\n          <div className=\"column is-three-quarters\">\r\n            <InventoryGrid selectedItems={selectedItems} fillCell={fillCell} />\r\n          </div>\r\n\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"section\">\r\n        <pre>\r\n          {`%ordercat `}\r\n          {map(selectedItems, (k, v) => formatCheat(k, v))}\r\n        </pre>\r\n      </section>\r\n\r\n      <footer className=\"footer\">\r\n        <div className=\"content has-text-centered\"><p>Original code by Ale Ornelas 2020 - Modified by JayJay 2021</p>\r\n        </div>\r\n      </footer>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}